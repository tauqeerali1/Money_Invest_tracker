{"ast":null,"code":"var _jsxFileName = \"/home/tauqeer/Downloads/React-Project/expense_tracker/src/components/Main/Form/Form.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport { TextField, Typography, Grid, Button, FormControl, InputLabel, Select, MenuItem } from '@material-ui/core';\nimport { ExpenseTrackerContext } from '../../../context/context';\nimport { v4 as uuidv4 } from 'uuid';\nimport { useSpeechContext } from '@speechly/react-client';\nimport formatDate from '../../../utils/formatDate';\nimport useStyles from './styles';\nimport { incomeCategories, expenseCategories } from '../../../constants/categories';\nimport CustomizedSnackbar from '../../Snackbar/Snackbar';\nconst initialState = {\n  amount: '',\n  category: '',\n  type: 'Income',\n  date: formatDate(new Date())\n};\n\nconst Form = () => {\n  _s();\n\n  const classes = useStyles();\n  const [formData, setFormData] = useState(initialState);\n  const {\n    addTransaction\n  } = useContext(ExpenseTrackerContext);\n  const {\n    segment\n  } = useSpeechContext();\n  const [open, setOpen] = useState(false);\n\n  const createTransaction = () => {\n    if (Number.isNaN(Number(formData.amount)) || !formData.date.includes('-')) return;\n    const transaction = { ...formData,\n      amount: Number(formData.amount),\n      id: uuidv4()\n    };\n    setOpen(true);\n    addTransaction(transaction);\n    setFormData(initialState);\n  };\n\n  useEffect(() => {\n    if (segment) {\n      if (segment.intent.intent === 'add_expense') {\n        setFormData({ ...formData,\n          type: 'Expense'\n        });\n      } else if (segment.intent.intent === 'add_income') {\n        setFormData({ ...formData,\n          type: 'Income'\n        });\n      } else if (segment.isFinal && segment.intent.intent === 'create_transaction') {\n        return createTransaction();\n      } else if (segment.isFinal && segment.intent.intent === 'cancel_transaction') {\n        return setFormData(initialState);\n      }\n\n      segment.entities.forEach(s => {\n        const category = `${s.value.charAt(0)}${s.value.slice(1).toLowerCase()}`;\n\n        switch (s.type) {\n          case 'amount':\n            setFormData({ ...formData,\n              amount: s.value\n            });\n            break;\n\n          case 'category':\n            if (incomeCategories.map(iC => iC.type).includes(category)) {\n              setFormData({ ...formData,\n                type: 'Income',\n                category\n              });\n            } else if (expenseCategories.map(iC => iC.type).includes(category)) {\n              setFormData({ ...formData,\n                type: 'Expense',\n                category\n              });\n            }\n\n            break;\n\n          case 'date':\n            setFormData({ ...formData,\n              date: s.value\n            });\n            break;\n\n          default:\n            break;\n        }\n      });\n\n      if (segment.isFinal && formData.amount && formData.category && formData.type && formData.date) {\n        createTransaction();\n      }\n    }\n  }, []);\n  const selectedCategories = formData.type === 'Income' ? incomeCategories : expenseCategories;\n  return /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CustomizedSnackbar, {\n    open: open,\n    setOpen: setOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    align: \"center\",\n    variant: \"subtitle2\",\n    gutterBottom: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 15\n    }\n  }, segment && segment.words.map(w => w.value).join(\" \"))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 19\n    }\n  }, \"Type\"), /*#__PURE__*/React.createElement(Select, {\n    value: formData.type,\n    onChange: e => setFormData({ ...formData,\n      type: e.target.value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"Income\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 23\n    }\n  }, \"Income\"), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"Expense\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 23\n    }\n  }, \"Expense\")))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 19\n    }\n  }, \"Category\"), /*#__PURE__*/React.createElement(Select, {\n    value: formData.category,\n    onChange: e => setFormData({ ...formData,\n      category: e.target.value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 19\n    }\n  }, selectedCategories.map(c => /*#__PURE__*/React.createElement(MenuItem, {\n    key: c.type,\n    value: c.type,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 54\n    }\n  }, c.type))))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    type: \"number\",\n    label: \"Amount\",\n    fullWidth: true,\n    value: formData.amount,\n    onChange: e => setFormData({ ...formData,\n      amount: e.target.value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    type: \"date\",\n    label: \"Date\",\n    fullWidth: true,\n    value: formData.date,\n    onChange: e => setFormData({ ...formData,\n      date: formatDate(e.target.value)\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    className: classes.button,\n    variant: \"outlined\",\n    color: \"primary\",\n    fullWidth: true,\n    onClick: createTransaction,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 11\n    }\n  }, \"Create\"));\n};\n\n_s(Form, \"9EzcxyjpGgK+rfvGuFwCVFpXWd4=\", false, function () {\n  return [useStyles, useSpeechContext];\n});\n\n_c = Form;\nexport default Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["/home/tauqeer/Downloads/React-Project/expense_tracker/src/components/Main/Form/Form.jsx"],"names":["React","useState","useEffect","useContext","TextField","Typography","Grid","Button","FormControl","InputLabel","Select","MenuItem","ExpenseTrackerContext","v4","uuidv4","useSpeechContext","formatDate","useStyles","incomeCategories","expenseCategories","CustomizedSnackbar","initialState","amount","category","type","date","Date","Form","classes","formData","setFormData","addTransaction","segment","open","setOpen","createTransaction","Number","isNaN","includes","transaction","id","intent","isFinal","entities","forEach","s","value","charAt","slice","toLowerCase","map","iC","selectedCategories","words","w","join","e","target","c","button"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useContext} from 'react';\nimport { TextField, Typography, Grid, Button, FormControl, InputLabel, Select, MenuItem } from '@material-ui/core';\nimport { ExpenseTrackerContext } from '../../../context/context';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { useSpeechContext } from '@speechly/react-client';\n\nimport formatDate from '../../../utils/formatDate';\nimport useStyles from './styles'\nimport { incomeCategories, expenseCategories } from '../../../constants/categories';\nimport CustomizedSnackbar from '../../Snackbar/Snackbar';\n\nconst initialState = {\n    amount: '',\n    category: '',\n    type: 'Income',\n    date: formatDate(new Date()),\n}\n\nconst Form = () => {\n    const classes = useStyles();\n    const [formData, setFormData] = useState(initialState);\n    const {addTransaction} = useContext(ExpenseTrackerContext);\n    const { segment } = useSpeechContext();\n    const [open, setOpen] = useState(false);\n\n    const createTransaction = () => {\n        if(Number.isNaN(Number(formData.amount)) || !formData.date.includes('-')) return;\n\n        const transaction = { ...formData, amount: Number(formData.amount), id: uuidv4() }\n\n        setOpen(true);\n        addTransaction(transaction);\n        setFormData(initialState);\n    }\n\n    useEffect(() => {\n        if (segment) {\n      if (segment.intent.intent === 'add_expense') {\n        setFormData({ ...formData, type: 'Expense' });\n      } else if (segment.intent.intent === 'add_income') {\n        setFormData({ ...formData, type: 'Income' });\n      } else if (segment.isFinal && segment.intent.intent === 'create_transaction') {\n        return createTransaction();\n      } else if (segment.isFinal && segment.intent.intent === 'cancel_transaction') {\n        return setFormData(initialState);\n      }\n\n            segment.entities.forEach((s) => {\n        const category = `${s.value.charAt(0)}${s.value.slice(1).toLowerCase()}`;\n\n        switch (s.type) {\n          case 'amount':\n            setFormData({ ...formData, amount: s.value });\n            break;\n          case 'category':\n            if (incomeCategories.map((iC) => iC.type).includes(category)) {\n              setFormData({ ...formData, type: 'Income', category });\n            } else if (expenseCategories.map((iC) => iC.type).includes(category)) {\n              setFormData({ ...formData, type: 'Expense', category });\n            }\n            break;\n          case 'date':\n            setFormData({ ...formData, date: s.value });\n            break;\n          default:\n            break;\n        }\n      });\n\n      if (segment.isFinal && formData.amount && formData.category && formData.type && formData.date) {\n        createTransaction();\n      }\n    }\n  }, []);\n\n    const selectedCategories = formData.type === 'Income' ? incomeCategories : expenseCategories;\n\n  return (\n      <Grid container spacing={2}>\n          <CustomizedSnackbar open={open} setOpen={setOpen} />\n          <Grid item xs={12}>\n              <Typography align='center' variant='subtitle2' gutterBottom>\n                  {segment && segment.words.map((w) => w.value).join(\" \")}\n              </Typography>\n          </Grid>\n          <Grid item xs={6}>\n              <FormControl fullWidth>\n                  <InputLabel>Type</InputLabel>\n                  <Select value={formData.type} onChange={(e) => setFormData({ ...formData, type: e.target.value})}>\n                      <MenuItem value=\"Income\">Income</MenuItem>\n                      <MenuItem value=\"Expense\">Expense</MenuItem>\n                  </Select>\n              </FormControl>\n          </Grid>\n          <Grid item xs={6}>\n              <FormControl fullWidth>\n                  <InputLabel>Category</InputLabel>\n                  <Select value={formData.category} onChange={(e) => setFormData({ ...formData, category: e.target.value })}>\n                      {selectedCategories.map((c) => <MenuItem key={c.type} value={c.type}>{c.type}</MenuItem>)}\n                  </Select>\n              </FormControl>\n          </Grid>\n          <Grid item xs={6}>\n              <TextField type=\"number\" label=\"Amount\" fullWidth value={formData.amount} onChange={(e) => setFormData({ ...formData, amount: e.target.value})} />\n        </Grid>\n        <Grid item xs={6}>\n              <TextField type=\"date\" label=\"Date\" fullWidth value={formData.date} onChange={(e) => setFormData({ ...formData, date: formatDate(e.target.value)})}/>\n          </Grid>\n          <Button className={classes.button} variant=\"outlined\" color=\"primary\" fullWidth onClick={createTransaction}>Create</Button>\n      </Grid>\n  )\n};\n\nexport default Form;\n"]},"metadata":{},"sourceType":"module"}